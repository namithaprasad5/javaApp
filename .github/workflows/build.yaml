name: Build, Test, and Deploy Java Application

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Java (JDK 11)
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'adopt'

      # Step 3: Cache Maven dependencies
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Step 4: Build the application with Maven
      - name: Build with Maven
        run: mvn clean package

      # Step 5: Upload build artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: demo-artifact
          path: target/demo.war

      # Step 6: Set up SSH key for Azure VM
      - name: Set up SSH key for Azure VM
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.AZURE_SSH_PRIVATE_KEY }}

      # Step 7: Deploy to Tomcat container on Azure VM
      - name: Deploy to Tomcat inside Docker
        run: |
          # Securely copy the WAR file to Azure VM
          scp -o StrictHostKeyChecking=no target/demo.war azureuser@${{ secrets.AZURE_VM_IP }}:/home/azureuser/

          # Log in to the Azure VM and deploy the WAR to Tomcat container
          ssh -o StrictHostKeyChecking=no azureuser@${{ secrets.AZURE_VM_IP }} << 'EOF'
            # Container name (replace if different)
            CONTAINER_NAME="my-tomcat-container"

            # Verify container is running
            if ! sudo docker ps --filter "name=$CONTAINER_NAME" --format "{{.Names}}" | grep -q "$CONTAINER_NAME"; then
              echo "Error: Tomcat container '$CONTAINER_NAME' is not running."
              exit 1
            fi

            # Copy the WAR file to the Tomcat webapps directory inside the container
            sudo docker cp /home/azureuser/demo.war $CONTAINER_NAME:/usr/local/tomcat/webapps/

            # Restart the Tomcat service inside the container
            sudo docker exec $CONTAINER_NAME catalina.sh stop
            sudo docker exec $CONTAINER_NAME catalina.sh start

            # Remove the WAR file from the VM
            rm /home/azureuser/demo.war
          EOF
